{"version":3,"file":"static/js/987.6eb8ce1d.chunk.js","mappings":"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","sources":["Layouts/Main/MyAssets/Components/Elements/MesoneryImage.js","Layouts/Main/MyAssets/Components/Mesonery.js"],"sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class MesoneryImage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      imgHeight: '100',\r\n      imgWidth: '100',\r\n      error: '',\r\n      imgUrl: props.url\r\n    }\r\n  } \r\n\r\n  componentWillMount() {\r\n    this.onMediaLoad(this.props)\r\n  }\r\n\r\n  onMediaLoad = async (props) => {\r\n    const { height, width } = props;\r\n\r\n    if (height && height !== \"\" && width && width !== \"\") {\r\n        this.setState({\r\n            imgHeight: (parseInt(height) * 100) / parseInt(width),\r\n            imgWidth: (parseInt(width) * 100) / parseInt(height)\r\n        })\r\n    }else{\r\n        // const image = await loadImage(imgUrl);\r\n        // this.setState({\r\n        //     height: (image.height * 100) / image.width,\r\n        //     width: (image.width * 100) / image.height\r\n        // })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { height, width, alt } = this.props\r\n    const { imgHeight, imgUrl } = this.state\r\n\r\n    const imageStyle = {\r\n      paddingBottom: imgHeight + '%', width: '100%'\r\n    };\r\n\r\n    return <div className=\"position-relative rounded-1 bg-light overflow-hidden\" style={imageStyle}> \r\n              <img className=\"img-fluid position-absolute\" loading=\"lazy\" src={imgUrl} height={height} width={width} alt={alt ? alt : 'suit image'} />\r\n          </div>\r\n  }\r\n}\r\n","import React, { Component, Suspense } from 'react';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Masonry from \"react-masonry-component\";\r\nimport MesoneryImage from './Elements/MesoneryImage';\r\nconst FilterAside = React.lazy(() => import('./FilterAside'));\r\nconst AssetsModal = React.lazy(() => import('../AssetsModal/AssetsModal'));\r\n\r\nconst masonryOptions = {\r\n    fitWidth: false,\r\n    itemSelector: \".assetsItem\",\r\n    transitionDuration: 0\r\n};\r\nclass Mesonery extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {imagesData:[], page:0, showModal:false};\r\n    }\r\n    getData = () => {\r\n        var self=this\r\n        fetch(`https://api.unsplash.com/photos?client_id=ZqXbcY28ANlOVeIWmpXwtR9ZKeB44r24xyNIf2uVzC8&page=${this.state.page + 1}`).then((response) => response.json()).then((res) => {\r\n            self.setState({imagesData:[...self.state.imagesData, ...res]})\r\n        })\r\n        .catch((err) => {\r\n            console.error(err);\r\n        });\r\n    };\r\n    fetchData = () => {\r\n        let { page } = this.state;\r\n        this.setState({ page: page + 2 })\r\n        this.getData();\r\n    };\r\n    refresh = () => {\r\n        console.log(\"refresh.....\");\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n\r\n    handleModalShow=()=>{\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleCallback = (dataEvent) => {\r\n        this.setState({\r\n            showModal: dataEvent\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {imagesData, showModal} = this.state;\r\n        return <>\r\n                <div className=\"\">\r\n                    {imagesData.length > 0 ? <div className=\"\">\r\n                        <div className=\"d-flex align-items-start justify-content-between\">\r\n                            <label className=\"form-check mb-xxl-3 mb-2\">\r\n                                <input className=\"form-check-input\" type=\"checkbox\" name=\"\" value=\"select\" />\r\n                                <span className=\"form-check-label\">Select All ({imagesData.length})</span>\r\n                            </label>\r\n                        </div>\r\n                    </div> : null}\r\n                    <InfiniteScroll\r\n                        dataLength={imagesData.length}\r\n                        next={this.fetchData}\r\n                        hasMore={true}\r\n                        loader={<div className=\"loader_default\">Loading...</div>}\r\n                        scrollThreshold=\"200px\"\r\n                        endMessage={\r\n                        <p>\r\n                            <b>Yay! You have seen it all</b>\r\n                        </p>\r\n                        }\r\n                        refreshFunction={this.refresh}\r\n                        pullDownToRefresh\r\n                        pullDownToRefreshThreshold={50}\r\n                        pullDownToRefreshContent={\r\n                            <h3>Pull down to refresh</h3>\r\n                        }\r\n                        releaseToRefreshContent={\r\n                        <h3>Release to refresh</h3>\r\n                        }>\r\n                        <Masonry\r\n                        className={\"row\"}\r\n                        elementType={\"div\"}\r\n                        options={masonryOptions}\r\n                        disableImagesLoaded={false}\r\n                        updateOnEachImageLoad={true}\r\n                        >\r\n                        {imagesData && imagesData.map((photo, index) => (\r\n                            <div key={index} className=\"col-xxl-2 col-xl-3 col-md-4 col-sm-6 overflow-hidden assetsItem\">\r\n                                <div className=\"card card-custom gutter-b\">\r\n                                    <div className=\"card-body d-flex flex-column p-2\">\r\n                                        <div className=\"d-flex align-items-center pb-2\">\r\n                                            <label className=\"form-check\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" name=\"\" value=\"phone\" />\r\n                                            </label>\r\n                                            <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"button-tooltip-2\">Pin to top</Tooltip>}>\r\n                                                <button type=\"button\" className=\"btn p-0 border-0 me-2\">\r\n                                                    <span className=\"svg-icon svg-icon-5\">\r\n                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n                                                            <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                                                            <path d=\"M18 3v2h-1v6l2 3v2h-6v7h-2v-7H5v-2l2-3V5H6V3z\" fill=\"currentColor\"/>\r\n                                                        </svg>\r\n                                                    </span>\r\n                                                </button>\r\n                                            </OverlayTrigger>\r\n                                            <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"button-tooltip-2\">Favourite</Tooltip>}>\r\n                                                <button type=\"button\" className=\"btn p-0 border-0\">\r\n                                                    <span className=\"svg-icon svg-icon-5\">\r\n                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n                                                            <path fill=\"none\" d=\"M0 0H24V24H0z\"/>\r\n                                                            <path d=\"M12.001 4.529c2.349-2.109 5.979-2.039 8.242.228 2.262 2.268 2.34 5.88.236 8.236l-8.48 8.492-8.478-8.492c-2.104-2.356-2.025-5.974.236-8.236 2.265-2.264 5.888-2.34 8.244-.228z\" fill=\"currentColor\"/>\r\n                                                        </svg>\r\n                                                    </span>\r\n                                                </button>\r\n                                            </OverlayTrigger>\r\n                                        </div>\r\n                                        <div className=\"d-flex align-items-center cursor-pointer\" onClick={this.handleModalShow} animation={'fade'}>\r\n                                            <MesoneryImage height={photo.height} width={photo.width} url={photo.urls.small} alt={photo.alt_description} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            ))}\r\n                        </Masonry>\r\n                    </InfiniteScroll>\r\n                </div>\r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                    <FilterAside />\r\n                </Suspense>\r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                    <AssetsModal modalCallback = {this.handleCallback} modalToggle={showModal}/>\r\n                </Suspense>\r\n            </>\r\n    }\r\n}\r\n\r\nexport default Mesonery;"],"names":["MesoneryImage","props","onMediaLoad","height","width","setState","imgHeight","parseInt","imgWidth","state","error","imgUrl","url","this","alt","imageStyle","paddingBottom","className","style","loading","src","Component","FilterAside","React","AssetsModal","masonryOptions","fitWidth","itemSelector","transitionDuration","Mesonery","getData","self","fetch","page","then","response","json","res","imagesData","catch","err","console","fetchData","refresh","log","handleModalShow","showModal","handleCallback","dataEvent","length","type","name","value","dataLength","next","hasMore","loader","scrollThreshold","endMessage","refreshFunction","pullDownToRefresh","pullDownToRefreshThreshold","pullDownToRefreshContent","releaseToRefreshContent","elementType","options","disableImagesLoaded","updateOnEachImageLoad","map","photo","index","OverlayTrigger","placement","overlay","Tooltip","id","xmlns","viewBox","fill","d","onClick","animation","urls","small","alt_description","Suspense","fallback","modalCallback","modalToggle"],"sourceRoot":""}